<#
.SYNOPSIS
Add/Update/Delete a tenant group in the CIPP system.

.DESCRIPTION
The Set-CIPPTenantGroup function is used to add, edit, or remove a tenant group from the CIPP system. 

.PARAMETER Action
Add/Delete/Update

.PARAMETER TenantGroupID
Specifies the group ID to modify/delete. Is ignored for Add actions.

.PARAMETER Name
Specify the Name for the Tenant Group.

.PARAMETER Description
Updates the group description, if provided.

.PARAMETER AddMembers
Specifiy which tenants to add to the group. This needs to be an array of customer tenant ID Guids (1fefeb73-0947-4803-a720-92be0e9a7d8e)

.PARAMETER RemoveMembers
Specifiy which tenants to remove from the group. This needs to be an array of customer tenant ID Guids (1fefeb73-0947-4803-a720-92be0e9a7d8e)

.EXAMPLE


#>
function Set-CIPPTenantGroup {
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $true)]
        [ValidateSet('AddEdit', 'Delete')] 
        [string]$Action,
        [Parameter()]
        [string]$TenantGroupId,
        [Paramter()]
        [string]$GroupName,
        [Paramter()]
        [string]$GroupDescription,
        [Parameter()]
        [switch[]]$AddMembers,
        [Parameter()]
        [switch[]]$RemoveMembers
    )

    $endpoint = '/api/EditTenantGroup'

    # Test for existing group
    $existingGroup = $null

    if ($Action -EQ 'Add') {
        if (-not $GroupName -and -not $Description) {
            throw 'Missing required field(s) for action `'AddEdit`''
        }

        # Check for existing group via name
        $existingGroup = Get-CippTenantGroups -TenantGroupId $TenantGroupId | Where-Object $_.Name -EQ $GroupName 

        if ($existingGroup) {
             throw 'Unable to create new Tenant Group. A group with the specified name already exisits.'
        }

        $params = @{}
        $body = @{
               Action = 'AddEdit',
               groupName = $GroupName,
               groupDescription = $GroupDescription,
               members = $AddMembers
           }  
        Write-Verbose "Adding new Tenant Group `'$Name`'."
        Invoke-CIPPRestMethod -Endpoint $endpoint -Params $params -Body $body -Method POST
        
    }

    # Check for existing group via Id
    if ($TenantGroupId) {
         Write-Verbose 'Checking for existing group with matching Id.'
         $existingGroup = Get-CippTenantGroups -TenantGroupId $TenantGroupId
    }

    if ($Action -EQ 'Edit' -and -not $existingGroup) {
        throw 'Specified group Id does not exist. Unable to edit non-existant group.'
    }
    if ($Action -EQ 'Edit' -and -not $GroupName -not $Description -and -not $AddMember -and -not $RemoveMember) {
        throw 'You must specify at least 1 property to update.'

        $params = @{}
        $body = @{
           Action           = 'AddEdit'
           groupId          = $TenantGroupId
           groupName        = $existingGroup.Name
           groupDescription = $existingGroup.Description
           members          = $existingGroup.Members.customerId
        }

        # Set updated properties
        if ($GroupName) {
            $body['groupName'] = $GroupName
        }
        if ($GroupDescription) {
            $body['groupDescription'] = $GroupDescription
        }
        if ($AddMembers) {
            foreach ($member in $AddMembers ) { if ($member -notmatch $existingGroupMembers.customerId) { $body['members'] += $member }
        }
        if ($RemoveMembers) {
            throw 'Remove members not yet implemented.'
        }

        Write-Verbose "Updating Tenant Group $CustomerTenantID."
        Invoke-CIPPRestMethod -Endpoint $endpoint -Params $params -Body $body -Method POST
    }


    if ($Action -EQ 'Delete' -and -not $existingGroup) {
        throw 'Tenant Group to be deleted not found/specified.'

        $params = @{}
        $body = @{
            Action           = 'Delete'
            groupId          = $TenantGroupId
        }
        Write-Verbose "Deleting Tenant Group $TenantGroupID."
        Invoke-CIPPRestMethod -Endpoint $endpoint -Params $params -Body $body -Method POST
    }
}
